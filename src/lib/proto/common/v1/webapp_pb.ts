// @generated by protoc-gen-es v2.2.2 with parameter "target=ts,json_types=true"
// @generated from file common/v1/webapp.proto (package common.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb";
import type { Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file common/v1/webapp.proto.
 */
export const file_common_v1_webapp: GenFile = /*@__PURE__*/
  fileDesc("ChZjb21tb24vdjEvd2ViYXBwLnByb3RvEgljb21tb24udjEiqwQKBEJhbmsSDAoEY29kZRgBIAEoCRIMCgRuYW1lGAIgASgJEhUKDW5hbWVfa2F0YWthbmEYAyABKAkSFQoNbmFtZV9oaXJhZ2FuYRgEIAEoCRIVCg1uYW1lX2FscGhhYmV0GAUgASgJEiUKBmFzc2V0cxgLIAEoCzIVLmNvbW1vbi52MS5CYW5rQXNzZXRzEiMKBXF1b3RhGBQgASgLMhQuY29tbW9uLnYxLkJhbmtRdW90YRIVCg1vcGVuaW5nX2hvdXJzGB4gASgJElEKHmJhbmtwYXlfc2NoZWR1bGVkX21haW50ZW5hbmNlcxgoIAMoCzIpLmNvbW1vbi52MS5CYW5rU2NoZWR1bGVkTWFpbnRlbmFuY2VQZXJpb2QSTgobYmFua19zY2hlZHVsZWRfbWFpbnRlbmFuY2VzGCkgAygLMikuY29tbW9uLnYxLkJhbmtTY2hlZHVsZWRNYWludGVuYW5jZVBlcmlvZBJWCiNyZWdpc3RyYXRpb25fc2NoZWR1bGVkX21haW50ZW5hbmNlcxgqIAMoCzIpLmNvbW1vbi52MS5CYW5rU2NoZWR1bGVkTWFpbnRlbmFuY2VQZXJpb2QSGQoRYmFua3BheV9hdmFpbGFibGUYMiABKAgSFgoOYmFua19hdmFpbGFibGUYMyABKAgSHgoWcmVnaXN0cmF0aW9uX2F2YWlsYWJsZRg0IAEoCBIRCglvcGVyYXRpbmcYYyABKAgivwMKCUJhbmtRdW90YRIyCipvZmZsaW5lX3B1cmNoYXNlX2xpbWl0X3Blcl9jaGFyZ2Vfd2l0aF9reWMYASABKAUSNQotb2ZmbGluZV9wdXJjaGFzZV9saW1pdF9wZXJfY2hhcmdlX3dpdGhvdXRfa3ljGAIgASgFEi8KJ29mZmxpbmVfcHVyY2hhc2VfbGltaXRfcGVyX2RheV93aXRoX2t5YxgKIAEoBRIyCipvZmZsaW5lX3B1cmNoYXNlX2xpbWl0X3Blcl9kYXlfd2l0aG91dF9reWMYCyABKAUSNwovc3Vic2NyaXB0aW9uX3B1cmNoYXNlX2xpbWl0X3Blcl9jaGFyZ2Vfd2l0aF9reWMYFCABKAUSOgoyc3Vic2NyaXB0aW9uX3B1cmNoYXNlX2xpbWl0X3Blcl9jaGFyZ2Vfd2l0aG91dF9reWMYFSABKAUSNAosc3Vic2NyaXB0aW9uX3B1cmNoYXNlX2xpbWl0X3Blcl9kYXlfd2l0aF9reWMYHiABKAUSNwovc3Vic2NyaXB0aW9uX3B1cmNoYXNlX2xpbWl0X3Blcl9kYXlfd2l0aG91dF9reWMYHyABKAUihwEKHkJhbmtTY2hlZHVsZWRNYWludGVuYW5jZVBlcmlvZBIRCgliYW5rX2NvZGUYASABKAkSFAoMc3RhcnRfYXRfanN0GAIgASgJEhIKCmVuZF9hdF9qc3QYAyABKAkSFAoMc3RhcnRfYXRfdXRjGAQgASgJEhIKCmVuZF9hdF91dGMYBSABKAkihwEKCkJhbmtCcmFuY2gSEQoJYmFua19jb2RlGAEgASgJEhMKC2JyYW5jaF9jb2RlGAIgASgJEgwKBG5hbWUYAyABKAkSFQoNbmFtZV9rYXRha2FuYRgEIAEoCRIVCg1uYW1lX2hpcmFnYW5hGAUgASgJEhUKDW5hbWVfYWxwaGFiZXQYBiABKAkiYwoKQmFua0Fzc2V0cxIRCgliYW5rX2NvZGUYASABKAkSFgoObG9nb191cmxfbGFyZ2UYAiABKAkSFwoPbG9nb191cmxfbWVkaXVtGAMgASgJEhEKCXRlcm1zX3VybBgKIAEoCSKpBAoFQnV5ZXISSQoFZW1haWwYASABKAlCOrpIN7oBNAoLdmFsaWRfZW1haWwSFW11c3QgYmUgYSB2YWxpZCBlbWFpbBoOdGhpcy5pc0VtYWlsKCkSEQoJZm9yY2Vfa3ljGAIgASgIEhwKBG5hbWUYBCABKAlCCbpIBnIEEAEYMkgAiAEBEioKEmthdGFrYW5hX2xhc3RfbmFtZRgLIAEoCUIJukgGcgQQARgySAGIAQESKwoTa2F0YWthbmFfZmlyc3RfbmFtZRgMIAEoCUIJukgGcgQQARgySAKIAQESHwoHYWRkcmVzcxgNIAEoCUIJukgGcgQQBRhkSAOIAQESNgoKYmlydGhfZGF0ZRgUIAEoCUIdukgachgyFl4oXGR7NH0tXGR7Mn0tXGR7Mn0pPyRIBIgBARIxCgZnZW5kZXIYFSABKAlCHLpIGXIXUgZmZW1hbGVSBG1hbGVSB3Vua25vd25IBYgBARIwCghtZXRhZGF0YRgeIAMoCzIeLmNvbW1vbi52MS5CdXllci5NZXRhZGF0YUVudHJ5Gi8KDU1ldGFkYXRhRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUIHCgVfbmFtZUIVChNfa2F0YWthbmFfbGFzdF9uYW1lQhYKFF9rYXRha2FuYV9maXJzdF9uYW1lQgoKCF9hZGRyZXNzQg0KC19iaXJ0aF9kYXRlQgkKB19nZW5kZXIiYgoDS3ljEhEKCXB1YmxpY19pZBgBIAEoCRIiCgVzdGF0ZRgCIAEoDjITLmNvbW1vbi52MS5LeWNTdGF0ZRIkCgZyZXN1bHQYAyABKA4yFC5jb21tb24udjEuS3ljUmVzdWx0Im8KCkRhdGVGaWx0ZXISJQoFcmFuZ2UYASABKAsyFC5jb21tb24udjEuRGF0ZVJhbmdlSAASMAoKZXhhY3RfZGF0ZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBIAEIICgZmaWx0ZXIiaQoJRGF0ZVJhbmdlEi4KCnN0YXJ0X2RhdGUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiwKCGVuZF9kYXRlGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCJLCg5Vc2VyQWdyZWVtZW50cxI5ChNqYW1tX3VzZXJfYWdyZWVtZW50GAIgASgLMhwuY29tbW9uLnYxLkphbW1Vc2VyQWdyZWVtZW50IpEBChFKYW1tVXNlckFncmVlbWVudBITCgtjdXN0b21lcl9pZBgBIAEoCRI4Cg5hZ3JlZW1lbnRfbmFtZRgCIAEoDjIgLmNvbW1vbi52MS5KYW1tVXNlckFncmVlbWVudE5hbWUSLQoJYWdyZWVkX2F0GAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCL2AgoNVHJ1c3Rkb2NrRGF0YRIKCgJpZBgBIAEoCRIRCglwdWJsaWNfaWQYAiABKAkSDQoFc3RhdGUYAyABKAkSDgoGcmVzdWx0GAQgASgJEi8KC2FjY2VwdGVkX2F0GAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI1ChFwbGFuc19zZWxlY3RlZF9hdBgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASOQoVZG9jdW1lbnRfc3VibWl0dGVkX2F0GAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIvCgtwcmVwYXJlZF9hdBgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLwoLdmVyaWZpZWRfYXQYCSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiIKB3JlY29yZHMYCiADKAsyES5jb21tb24udjEuUmVjb3JkImkKBlJlY29yZBINCgVzdGF0ZRgBIAEoCRIOCgZyZXN1bHQYAiABKAkSDwoHY29udGVudBgDIAEoCRIvCgt2ZXJpZmllZF9hdBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAqWAoGR2VuZGVyEhYKEkdFTkRFUl9VTlNQRUNJRklFRBAAEhEKDUdFTkRFUl9GRU1BTEUQARIPCgtHRU5ERVJfTUFMRRACEhIKDkdFTkRFUl9VTktOT1dOEAMqoAEKDENvbW1vblN0YXR1cxIdChlDT01NT05fU1RBVFVTX1VOU1BFQ0lGSUVEEAASGQoVQ09NTU9OX1NUQVRVU19JTklUSUFMEAESGwoXQ09NTU9OX1NUQVRVU19BQ1RJVkFURUQQAhIdChlDT01NT05fU1RBVFVTX0RFQUNUSVZBVEVEEAMSGgoWQ09NTU9OX1NUQVRVU19CTE9DS0lORxAEKtgBCgxDaGFyZ2VTdGF0dXMSHQoZQ0hBUkdFX1NUQVRVU19VTlNQRUNJRklFRBAAEhkKFUNIQVJHRV9TVEFUVVNfU1VDQ0VTUxABEhkKFUNIQVJHRV9TVEFUVVNfRkFJTFVSRRACEh4KGkNIQVJHRV9TVEFUVVNfV0FJVElOR19FS1lDEAMSGgoWQ0hBUkdFX1NUQVRVU19CTE9DS0lORxAEEhsKF0NIQVJHRV9TVEFUVVNfQ0FOQ0VMTEVEEAUSGgoWQ0hBUkdFX1NUQVRVU19SRUZVTkRFRBAGKp0BChVKYW1tVXNlckFncmVlbWVudE5hbWUSKAokSkFNTV9VU0VSX0FHUkVFTUVOVF9OQU1FX1VOU1BFQ0lGSUVEEAASKwonSkFNTV9VU0VSX0FHUkVFTUVOVF9OQU1FX1BSSVZBQ1lfUE9MSUNZEAESLQopSkFNTV9VU0VSX0FHUkVFTUVOVF9OQU1FX1RFUk1TX09GX1NFUlZJQ0UQAirhAQoIS3ljU3RhdGUSGQoVS1lDX1NUQVRFX1VOU1BFQ0lGSUVEEAASFgoSS1lDX1NUQVRFX0FDQ0VQVEVEEAESHAoYS1lDX1NUQVRFX1BMQU5TX1NFTEVDVEVEEAISIAocS1lDX1NUQVRFX0RPQ1VNRU5UX1NVQk1JVFRFRBADEhkKFUtZQ19TVEFURV9JTl9QUk9HUkVTUxAEEhYKEktZQ19TVEFURV9WRVJJRklFRBAFEhkKFUtZQ19TVEFURV9OT1RfU1RBUlRFRBAGEhQKEEtZQ19TVEFURV9ERU5JRUQQBypXCglLeWNSZXN1bHQSGgoWS1lDX1JFU1VMVF9VTlNQRUNJRklFRBAAEhcKE0tZQ19SRVNVTFRfQVBQUk9WRUQQARIVChFLWUNfUkVTVUxUX0RFTklFRBACKrQBCgxSZWZ1bmRTdGF0dXMSHQoZUkVGVU5EX1NUQVRVU19VTlNQRUNJRklFRBAAEiYKIlJFRlVORF9TVEFUVVNfV0FJVElOR19DT05GSVJNQVRJT04QARIbChdSRUZVTkRfU1RBVFVTX0NPTkZJUk1FRBACEhgKFFJFRlVORF9TVEFUVVNfRkFJTEVEEAMSJgoiUkVGVU5EX1NUQVRVU19DQU5DRUxFRF9CWV9NRVJDSEFOVBAEKrEBCgxSZWplY3RSZWFzb24SHQoZUkVKRUNUX1JFQVNPTl9VTlNQRUNJRklFRBAAEikKJVJFSkVDVF9SRUFTT05fTUVSQ0hBTlRfUkVRVUVTVF9ERU5JRUQQARIrCidSRUpFQ1RfUkVBU09OX05FR0FUSVZFX01FUkNIQU5UX0JBTEFOQ0UQAhIqCiZSRUpFQ1RfUkVBU09OX1BBWU1FTlRfUkVKRUNURURfQllfQkFOSxADQoQBCg1jb20uY29tbW9uLnYxQgtXZWJhcHBQcm90b1ABWiFhcGkvcHJvdG8vZ2VuL2NvbW1vbi92MTtjb21tb25fdjGiAgNDWFiqAglDb21tb24uVjHKAglDb21tb25cVjHiAhVDb21tb25cVjFcR1BCTWV0YWRhdGHqAgpDb21tb246OlYxYgZwcm90bzM", [file_buf_validate_validate, file_google_protobuf_timestamp]);

/**
 * Bank represents a bank.
 *
 * @generated from message common.v1.Bank
 */
export type Bank = Message<"common.v1.Bank"> & {
  /**
   * Bank code, e.g. "0001"
   *
   * @generated from field: string code = 1;
   */
  code: string;

  /**
   * Official name of the bank, e.g. "みずほ銀行"
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Katakana name of the bank, e.g. "ミズホギンコウ"
   *
   * @generated from field: string name_katakana = 3;
   */
  nameKatakana: string;

  /**
   * Hiragana name of the bank, e.g. "みずほぎんこう"
   *
   * @generated from field: string name_hiragana = 4;
   */
  nameHiragana: string;

  /**
   * Alphabet name of the bank, e.g. "Mizuho Bank"
   *
   * @generated from field: string name_alphabet = 5;
   */
  nameAlphabet: string;

  /**
   * Contains bank brand assets and metadata (e.g. Terms URL and Logo)
   *
   * @generated from field: common.v1.BankAssets assets = 11;
   */
  assets?: BankAssets;

  /**
   * Quota of the bank.
   *
   * @generated from field: common.v1.BankQuota quota = 20;
   */
  quota?: BankQuota;

  /**
   * @generated from field: string opening_hours = 30;
   */
  openingHours: string;

  /**
   * @generated from field: repeated common.v1.BankScheduledMaintenancePeriod bankpay_scheduled_maintenances = 40;
   */
  bankpayScheduledMaintenances: BankScheduledMaintenancePeriod[];

  /**
   * @generated from field: repeated common.v1.BankScheduledMaintenancePeriod bank_scheduled_maintenances = 41;
   */
  bankScheduledMaintenances: BankScheduledMaintenancePeriod[];

  /**
   * @generated from field: repeated common.v1.BankScheduledMaintenancePeriod registration_scheduled_maintenances = 42;
   */
  registrationScheduledMaintenances: BankScheduledMaintenancePeriod[];

  /**
   * True when Bankpay is currently available.
   *
   * @generated from field: bool bankpay_available = 50;
   */
  bankpayAvailable: boolean;

  /**
   * True when Bank is currently available.
   *
   * @generated from field: bool bank_available = 51;
   */
  bankAvailable: boolean;

  /**
   * True when registration is currently available.
   *
   * @generated from field: bool registration_available = 52;
   */
  registrationAvailable: boolean;

  /**
   * True when bank is operating, false when its not.
   * Core UI is expected to navigate user to out-of-service page when this flag is set to false.
   *
   * See Figma for more information:
   * https://www.figma.com/design/7cabcqjzvKl9IwzvJCuQEW/Jamm-%CE%B2-UI-design?node-id=304-11253&t=oyEUrdVtFOMV9xut-4
   *
   * @generated from field: bool operating = 99;
   */
  operating: boolean;
};

/**
 * Bank represents a bank.
 *
 * @generated from message common.v1.Bank
 */
export type BankJson = {
  /**
   * Bank code, e.g. "0001"
   *
   * @generated from field: string code = 1;
   */
  code?: string;

  /**
   * Official name of the bank, e.g. "みずほ銀行"
   *
   * @generated from field: string name = 2;
   */
  name?: string;

  /**
   * Katakana name of the bank, e.g. "ミズホギンコウ"
   *
   * @generated from field: string name_katakana = 3;
   */
  nameKatakana?: string;

  /**
   * Hiragana name of the bank, e.g. "みずほぎんこう"
   *
   * @generated from field: string name_hiragana = 4;
   */
  nameHiragana?: string;

  /**
   * Alphabet name of the bank, e.g. "Mizuho Bank"
   *
   * @generated from field: string name_alphabet = 5;
   */
  nameAlphabet?: string;

  /**
   * Contains bank brand assets and metadata (e.g. Terms URL and Logo)
   *
   * @generated from field: common.v1.BankAssets assets = 11;
   */
  assets?: BankAssetsJson;

  /**
   * Quota of the bank.
   *
   * @generated from field: common.v1.BankQuota quota = 20;
   */
  quota?: BankQuotaJson;

  /**
   * @generated from field: string opening_hours = 30;
   */
  openingHours?: string;

  /**
   * @generated from field: repeated common.v1.BankScheduledMaintenancePeriod bankpay_scheduled_maintenances = 40;
   */
  bankpayScheduledMaintenances?: BankScheduledMaintenancePeriodJson[];

  /**
   * @generated from field: repeated common.v1.BankScheduledMaintenancePeriod bank_scheduled_maintenances = 41;
   */
  bankScheduledMaintenances?: BankScheduledMaintenancePeriodJson[];

  /**
   * @generated from field: repeated common.v1.BankScheduledMaintenancePeriod registration_scheduled_maintenances = 42;
   */
  registrationScheduledMaintenances?: BankScheduledMaintenancePeriodJson[];

  /**
   * True when Bankpay is currently available.
   *
   * @generated from field: bool bankpay_available = 50;
   */
  bankpayAvailable?: boolean;

  /**
   * True when Bank is currently available.
   *
   * @generated from field: bool bank_available = 51;
   */
  bankAvailable?: boolean;

  /**
   * True when registration is currently available.
   *
   * @generated from field: bool registration_available = 52;
   */
  registrationAvailable?: boolean;

  /**
   * True when bank is operating, false when its not.
   * Core UI is expected to navigate user to out-of-service page when this flag is set to false.
   *
   * See Figma for more information:
   * https://www.figma.com/design/7cabcqjzvKl9IwzvJCuQEW/Jamm-%CE%B2-UI-design?node-id=304-11253&t=oyEUrdVtFOMV9xut-4
   *
   * @generated from field: bool operating = 99;
   */
  operating?: boolean;
};

/**
 * Describes the message common.v1.Bank.
 * Use `create(BankSchema)` to create a new message.
 */
export const BankSchema: GenMessage<Bank, BankJson> = /*@__PURE__*/
  messageDesc(file_common_v1_webapp, 0);

/**
 * BankQuota represents quota of a bank.
 * This message originates from business contract between Jamm and Banks, and it does not contain
 * any customer context (e.g. how much amount can customer pay when they already made purchase within a day)
 *
 * See Google Spreadsheet for more information:
 * https://docs.google.com/spreadsheets/d/1sxklqXzTGt-E7FgXB801d12Az8pbpZgs/edit?gid=1684227518#gid=1684227518
 *
 * @generated from message common.v1.BankQuota
 */
export type BankQuota = Message<"common.v1.BankQuota"> & {
  /**
   * Maximum amount of money that can be transferred in a single transaction, when customer has completed KYC.
   * Corresponds to Bankpay PaymentType=02 (非対面都度決済)
   *
   * @generated from field: int32 offline_purchase_limit_per_charge_with_kyc = 1;
   */
  offlinePurchaseLimitPerChargeWithKyc: number;

  /**
   * Maximum amount of money that can be transferred in a single transaction, when customer has not completed KYC.
   * Corresponds to Bankpay PaymentType=02 (非対面都度決済)
   *
   * @generated from field: int32 offline_purchase_limit_per_charge_without_kyc = 2;
   */
  offlinePurchaseLimitPerChargeWithoutKyc: number;

  /**
   * Maximum amount of money that can be transferred in a single day, when customer has completed KYC.
   * Corresponds to Bankpay PaymentType=02 (非対面都度決済)
   *
   * @generated from field: int32 offline_purchase_limit_per_day_with_kyc = 10;
   */
  offlinePurchaseLimitPerDayWithKyc: number;

  /**
   * Maximum amount of money that can be transferred in a single day, when customer has not completed KYC.
   * Corresponds to Bankpay PaymentType=02 (非対面都度決済)
   *
   * @generated from field: int32 offline_purchase_limit_per_day_without_kyc = 11;
   */
  offlinePurchaseLimitPerDayWithoutKyc: number;

  /**
   * Maximum amount of money that can be transferred in a subscription transaction, when customer has completed KYC.
   * Corresponds to Bankpay PaymentType=03 (継続課金)
   *
   * @generated from field: int32 subscription_purchase_limit_per_charge_with_kyc = 20;
   */
  subscriptionPurchaseLimitPerChargeWithKyc: number;

  /**
   * Maximum amount of money that can be transferred in a subscription transaction, when customer has not completed KYC.
   * Corresponds to Bankpay PaymentType=03 (継続課金)
   *
   * @generated from field: int32 subscription_purchase_limit_per_charge_without_kyc = 21;
   */
  subscriptionPurchaseLimitPerChargeWithoutKyc: number;

  /**
   * Maximum amount of money that can be transferred in a single day in subscription transactions, when customer has completed KYC.
   * Corresponds to Bankpay PaymentType=03 (継続課金)
   *
   * @generated from field: int32 subscription_purchase_limit_per_day_with_kyc = 30;
   */
  subscriptionPurchaseLimitPerDayWithKyc: number;

  /**
   * Maximum amount of money that can be transferred in a single day in subscription transactions, when customer has not completed KYC.
   * Corresponds to Bankpay PaymentType=03 (継続課金)
   *
   * @generated from field: int32 subscription_purchase_limit_per_day_without_kyc = 31;
   */
  subscriptionPurchaseLimitPerDayWithoutKyc: number;
};

/**
 * BankQuota represents quota of a bank.
 * This message originates from business contract between Jamm and Banks, and it does not contain
 * any customer context (e.g. how much amount can customer pay when they already made purchase within a day)
 *
 * See Google Spreadsheet for more information:
 * https://docs.google.com/spreadsheets/d/1sxklqXzTGt-E7FgXB801d12Az8pbpZgs/edit?gid=1684227518#gid=1684227518
 *
 * @generated from message common.v1.BankQuota
 */
export type BankQuotaJson = {
  /**
   * Maximum amount of money that can be transferred in a single transaction, when customer has completed KYC.
   * Corresponds to Bankpay PaymentType=02 (非対面都度決済)
   *
   * @generated from field: int32 offline_purchase_limit_per_charge_with_kyc = 1;
   */
  offlinePurchaseLimitPerChargeWithKyc?: number;

  /**
   * Maximum amount of money that can be transferred in a single transaction, when customer has not completed KYC.
   * Corresponds to Bankpay PaymentType=02 (非対面都度決済)
   *
   * @generated from field: int32 offline_purchase_limit_per_charge_without_kyc = 2;
   */
  offlinePurchaseLimitPerChargeWithoutKyc?: number;

  /**
   * Maximum amount of money that can be transferred in a single day, when customer has completed KYC.
   * Corresponds to Bankpay PaymentType=02 (非対面都度決済)
   *
   * @generated from field: int32 offline_purchase_limit_per_day_with_kyc = 10;
   */
  offlinePurchaseLimitPerDayWithKyc?: number;

  /**
   * Maximum amount of money that can be transferred in a single day, when customer has not completed KYC.
   * Corresponds to Bankpay PaymentType=02 (非対面都度決済)
   *
   * @generated from field: int32 offline_purchase_limit_per_day_without_kyc = 11;
   */
  offlinePurchaseLimitPerDayWithoutKyc?: number;

  /**
   * Maximum amount of money that can be transferred in a subscription transaction, when customer has completed KYC.
   * Corresponds to Bankpay PaymentType=03 (継続課金)
   *
   * @generated from field: int32 subscription_purchase_limit_per_charge_with_kyc = 20;
   */
  subscriptionPurchaseLimitPerChargeWithKyc?: number;

  /**
   * Maximum amount of money that can be transferred in a subscription transaction, when customer has not completed KYC.
   * Corresponds to Bankpay PaymentType=03 (継続課金)
   *
   * @generated from field: int32 subscription_purchase_limit_per_charge_without_kyc = 21;
   */
  subscriptionPurchaseLimitPerChargeWithoutKyc?: number;

  /**
   * Maximum amount of money that can be transferred in a single day in subscription transactions, when customer has completed KYC.
   * Corresponds to Bankpay PaymentType=03 (継続課金)
   *
   * @generated from field: int32 subscription_purchase_limit_per_day_with_kyc = 30;
   */
  subscriptionPurchaseLimitPerDayWithKyc?: number;

  /**
   * Maximum amount of money that can be transferred in a single day in subscription transactions, when customer has not completed KYC.
   * Corresponds to Bankpay PaymentType=03 (継続課金)
   *
   * @generated from field: int32 subscription_purchase_limit_per_day_without_kyc = 31;
   */
  subscriptionPurchaseLimitPerDayWithoutKyc?: number;
};

/**
 * Describes the message common.v1.BankQuota.
 * Use `create(BankQuotaSchema)` to create a new message.
 */
export const BankQuotaSchema: GenMessage<BankQuota, BankQuotaJson> = /*@__PURE__*/
  messageDesc(file_common_v1_webapp, 1);

/**
 * @generated from message common.v1.BankScheduledMaintenancePeriod
 */
export type BankScheduledMaintenancePeriod = Message<"common.v1.BankScheduledMaintenancePeriod"> & {
  /**
   * Bank code, e.g. "0001"
   *
   * @generated from field: string bank_code = 1;
   */
  bankCode: string;

  /**
   * Scheduled maintenance start time in JST, e.g. "2021-01-01T00:00:00"
   *
   * @generated from field: string start_at_jst = 2;
   */
  startAtJst: string;

  /**
   * Scheduled maintenance end time in JST, e.g. "2021-01-01T00:00:00"
   *
   * @generated from field: string end_at_jst = 3;
   */
  endAtJst: string;

  /**
   * Scheduled maintenance start time in UTC, e.g. "2021-01-01T00:00:00Z"
   *
   * @generated from field: string start_at_utc = 4;
   */
  startAtUtc: string;

  /**
   * Scheduled maintenance end time in UTC, e.g. "2021-01-01T00:00:00Z"
   *
   * @generated from field: string end_at_utc = 5;
   */
  endAtUtc: string;
};

/**
 * @generated from message common.v1.BankScheduledMaintenancePeriod
 */
export type BankScheduledMaintenancePeriodJson = {
  /**
   * Bank code, e.g. "0001"
   *
   * @generated from field: string bank_code = 1;
   */
  bankCode?: string;

  /**
   * Scheduled maintenance start time in JST, e.g. "2021-01-01T00:00:00"
   *
   * @generated from field: string start_at_jst = 2;
   */
  startAtJst?: string;

  /**
   * Scheduled maintenance end time in JST, e.g. "2021-01-01T00:00:00"
   *
   * @generated from field: string end_at_jst = 3;
   */
  endAtJst?: string;

  /**
   * Scheduled maintenance start time in UTC, e.g. "2021-01-01T00:00:00Z"
   *
   * @generated from field: string start_at_utc = 4;
   */
  startAtUtc?: string;

  /**
   * Scheduled maintenance end time in UTC, e.g. "2021-01-01T00:00:00Z"
   *
   * @generated from field: string end_at_utc = 5;
   */
  endAtUtc?: string;
};

/**
 * Describes the message common.v1.BankScheduledMaintenancePeriod.
 * Use `create(BankScheduledMaintenancePeriodSchema)` to create a new message.
 */
export const BankScheduledMaintenancePeriodSchema: GenMessage<BankScheduledMaintenancePeriod, BankScheduledMaintenancePeriodJson> = /*@__PURE__*/
  messageDesc(file_common_v1_webapp, 2);

/**
 * @generated from message common.v1.BankBranch
 */
export type BankBranch = Message<"common.v1.BankBranch"> & {
  /**
   * Bank code, e.g. "0001"
   *
   * @generated from field: string bank_code = 1;
   */
  bankCode: string;

  /**
   * Branch code, e.g. "001"
   *
   * @generated from field: string branch_code = 2;
   */
  branchCode: string;

  /**
   * Official name of the branch, e.g. "東京支店"
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * Katakana name of the branch, e.g. "トウキョウシテン"
   *
   * @generated from field: string name_katakana = 4;
   */
  nameKatakana: string;

  /**
   * Hiragana name of the branch, e.g. "とうきょうしてん"
   *
   * @generated from field: string name_hiragana = 5;
   */
  nameHiragana: string;

  /**
   * Alphabet name of the branch, e.g. "Tokyo Branch"
   *
   * @generated from field: string name_alphabet = 6;
   */
  nameAlphabet: string;
};

/**
 * @generated from message common.v1.BankBranch
 */
export type BankBranchJson = {
  /**
   * Bank code, e.g. "0001"
   *
   * @generated from field: string bank_code = 1;
   */
  bankCode?: string;

  /**
   * Branch code, e.g. "001"
   *
   * @generated from field: string branch_code = 2;
   */
  branchCode?: string;

  /**
   * Official name of the branch, e.g. "東京支店"
   *
   * @generated from field: string name = 3;
   */
  name?: string;

  /**
   * Katakana name of the branch, e.g. "トウキョウシテン"
   *
   * @generated from field: string name_katakana = 4;
   */
  nameKatakana?: string;

  /**
   * Hiragana name of the branch, e.g. "とうきょうしてん"
   *
   * @generated from field: string name_hiragana = 5;
   */
  nameHiragana?: string;

  /**
   * Alphabet name of the branch, e.g. "Tokyo Branch"
   *
   * @generated from field: string name_alphabet = 6;
   */
  nameAlphabet?: string;
};

/**
 * Describes the message common.v1.BankBranch.
 * Use `create(BankBranchSchema)` to create a new message.
 */
export const BankBranchSchema: GenMessage<BankBranch, BankBranchJson> = /*@__PURE__*/
  messageDesc(file_common_v1_webapp, 3);

/**
 * @generated from message common.v1.BankAssets
 */
export type BankAssets = Message<"common.v1.BankAssets"> & {
  /**
   * Bank code, e.g. "0001"
   *
   * @generated from field: string bank_code = 1;
   */
  bankCode: string;

  /**
   * URL to the bank logo in small size.
   * Fallback to default placeholder if bank logo is not available.
   * The image format is web/iOS/Android compatible.
   *
   * @generated from field: string logo_url_large = 2;
   */
  logoUrlLarge: string;

  /**
   * URL to the bank logo in medium size.
   * Fallback to default placeholder if bank logo is not available.
   * The image format is web/iOS/Android compatible.
   *
   * @generated from field: string logo_url_medium = 3;
   */
  logoUrlMedium: string;

  /**
   * Contains URL to the terms of service of the bank.
   *
   * See Figma for more information:
   * https://www.figma.com/design/7cabcqjzvKl9IwzvJCuQEW/Jamm-%CE%B2-UI-design?node-id=174-10898&t=oyEUrdVtFOMV9xut-4
   *
   * @generated from field: string terms_url = 10;
   */
  termsUrl: string;
};

/**
 * @generated from message common.v1.BankAssets
 */
export type BankAssetsJson = {
  /**
   * Bank code, e.g. "0001"
   *
   * @generated from field: string bank_code = 1;
   */
  bankCode?: string;

  /**
   * URL to the bank logo in small size.
   * Fallback to default placeholder if bank logo is not available.
   * The image format is web/iOS/Android compatible.
   *
   * @generated from field: string logo_url_large = 2;
   */
  logoUrlLarge?: string;

  /**
   * URL to the bank logo in medium size.
   * Fallback to default placeholder if bank logo is not available.
   * The image format is web/iOS/Android compatible.
   *
   * @generated from field: string logo_url_medium = 3;
   */
  logoUrlMedium?: string;

  /**
   * Contains URL to the terms of service of the bank.
   *
   * See Figma for more information:
   * https://www.figma.com/design/7cabcqjzvKl9IwzvJCuQEW/Jamm-%CE%B2-UI-design?node-id=174-10898&t=oyEUrdVtFOMV9xut-4
   *
   * @generated from field: string terms_url = 10;
   */
  termsUrl?: string;
};

/**
 * Describes the message common.v1.BankAssets.
 * Use `create(BankAssetsSchema)` to create a new message.
 */
export const BankAssetsSchema: GenMessage<BankAssets, BankAssetsJson> = /*@__PURE__*/
  messageDesc(file_common_v1_webapp, 4);

/**
 * @generated from message common.v1.Buyer
 */
export type Buyer = Message<"common.v1.Buyer"> & {
  /**
   * Email of the customer.
   * Merchant can update this value later through the UpdateCustomer endpoint.
   *
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * A flag whether Jamm to force KYC for the customer.
   *
   * @generated from field: bool force_kyc = 2;
   */
  forceKyc: boolean;

  /**
   * Name of the customer.
   * Merchant can update this value later through the UpdateCustomer endpoint.
   *
   * @generated from field: optional string name = 4;
   */
  name?: string;

  /**
   * Katakana name of the customer.
   * Merchant can update this value later through the UpdateCustomer endpoint.
   *
   * @generated from field: optional string katakana_last_name = 11;
   */
  katakanaLastName?: string;

  /**
   * Katakana name of the customer.
   * Merchant can update this value later through the UpdateCustomer endpoint.
   *
   * @generated from field: optional string katakana_first_name = 12;
   */
  katakanaFirstName?: string;

  /**
   * Address of the customer.
   * Merchant can update this value later through the UpdateCustomer endpoint.
   *
   * @generated from field: optional string address = 13;
   */
  address?: string;

  /**
   * Birth date of the customer.
   * Merchant can update this value later through the UpdateCustomer endpoint.
   *
   * @generated from field: optional string birth_date = 20;
   */
  birthDate?: string;

  /**
   * Gender of the customer.
   *
   * @generated from field: optional string gender = 21;
   */
  gender?: string;

  /**
   * Arbitrary key-value additional information about the customer.
   * Merchant can see this information in our merchant dashboard.
   *
   * @generated from field: map<string, string> metadata = 30;
   */
  metadata: { [key: string]: string };
};

/**
 * @generated from message common.v1.Buyer
 */
export type BuyerJson = {
  /**
   * Email of the customer.
   * Merchant can update this value later through the UpdateCustomer endpoint.
   *
   * @generated from field: string email = 1;
   */
  email?: string;

  /**
   * A flag whether Jamm to force KYC for the customer.
   *
   * @generated from field: bool force_kyc = 2;
   */
  forceKyc?: boolean;

  /**
   * Name of the customer.
   * Merchant can update this value later through the UpdateCustomer endpoint.
   *
   * @generated from field: optional string name = 4;
   */
  name?: string;

  /**
   * Katakana name of the customer.
   * Merchant can update this value later through the UpdateCustomer endpoint.
   *
   * @generated from field: optional string katakana_last_name = 11;
   */
  katakanaLastName?: string;

  /**
   * Katakana name of the customer.
   * Merchant can update this value later through the UpdateCustomer endpoint.
   *
   * @generated from field: optional string katakana_first_name = 12;
   */
  katakanaFirstName?: string;

  /**
   * Address of the customer.
   * Merchant can update this value later through the UpdateCustomer endpoint.
   *
   * @generated from field: optional string address = 13;
   */
  address?: string;

  /**
   * Birth date of the customer.
   * Merchant can update this value later through the UpdateCustomer endpoint.
   *
   * @generated from field: optional string birth_date = 20;
   */
  birthDate?: string;

  /**
   * Gender of the customer.
   *
   * @generated from field: optional string gender = 21;
   */
  gender?: string;

  /**
   * Arbitrary key-value additional information about the customer.
   * Merchant can see this information in our merchant dashboard.
   *
   * @generated from field: map<string, string> metadata = 30;
   */
  metadata?: { [key: string]: string };
};

/**
 * Describes the message common.v1.Buyer.
 * Use `create(BuyerSchema)` to create a new message.
 */
export const BuyerSchema: GenMessage<Buyer, BuyerJson> = /*@__PURE__*/
  messageDesc(file_common_v1_webapp, 5);

/**
 * @generated from message common.v1.Kyc
 */
export type Kyc = Message<"common.v1.Kyc"> & {
  /**
   * @generated from field: string public_id = 1;
   */
  publicId: string;

  /**
   * @generated from field: common.v1.KycState state = 2;
   */
  state: KycState;

  /**
   * @generated from field: common.v1.KycResult result = 3;
   */
  result: KycResult;
};

/**
 * @generated from message common.v1.Kyc
 */
export type KycJson = {
  /**
   * @generated from field: string public_id = 1;
   */
  publicId?: string;

  /**
   * @generated from field: common.v1.KycState state = 2;
   */
  state?: KycStateJson;

  /**
   * @generated from field: common.v1.KycResult result = 3;
   */
  result?: KycResultJson;
};

/**
 * Describes the message common.v1.Kyc.
 * Use `create(KycSchema)` to create a new message.
 */
export const KycSchema: GenMessage<Kyc, KycJson> = /*@__PURE__*/
  messageDesc(file_common_v1_webapp, 6);

/**
 * @generated from message common.v1.DateFilter
 */
export type DateFilter = Message<"common.v1.DateFilter"> & {
  /**
   * @generated from oneof common.v1.DateFilter.filter
   */
  filter: {
    /**
     * @generated from field: common.v1.DateRange range = 1;
     */
    value: DateRange;
    case: "range";
  } | {
    /**
     * @generated from field: google.protobuf.Timestamp exact_date = 2;
     */
    value: Timestamp;
    case: "exactDate";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message common.v1.DateFilter
 */
export type DateFilterJson = {
  /**
   * @generated from field: common.v1.DateRange range = 1;
   */
  range?: DateRangeJson;

  /**
   * @generated from field: google.protobuf.Timestamp exact_date = 2;
   */
  exactDate?: TimestampJson;
};

/**
 * Describes the message common.v1.DateFilter.
 * Use `create(DateFilterSchema)` to create a new message.
 */
export const DateFilterSchema: GenMessage<DateFilter, DateFilterJson> = /*@__PURE__*/
  messageDesc(file_common_v1_webapp, 7);

/**
 * @generated from message common.v1.DateRange
 */
export type DateRange = Message<"common.v1.DateRange"> & {
  /**
   * @generated from field: google.protobuf.Timestamp start_date = 1;
   */
  startDate?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_date = 2;
   */
  endDate?: Timestamp;
};

/**
 * @generated from message common.v1.DateRange
 */
export type DateRangeJson = {
  /**
   * @generated from field: google.protobuf.Timestamp start_date = 1;
   */
  startDate?: TimestampJson;

  /**
   * @generated from field: google.protobuf.Timestamp end_date = 2;
   */
  endDate?: TimestampJson;
};

/**
 * Describes the message common.v1.DateRange.
 * Use `create(DateRangeSchema)` to create a new message.
 */
export const DateRangeSchema: GenMessage<DateRange, DateRangeJson> = /*@__PURE__*/
  messageDesc(file_common_v1_webapp, 8);

/**
 * @generated from message common.v1.UserAgreements
 */
export type UserAgreements = Message<"common.v1.UserAgreements"> & {
  /**
   * Agreements
   * 1. Customer and Jamm
   * 2. Customer and per-Bank
   *
   * @generated from field: common.v1.JammUserAgreement jamm_user_agreement = 2;
   */
  jammUserAgreement?: JammUserAgreement;
};

/**
 * @generated from message common.v1.UserAgreements
 */
export type UserAgreementsJson = {
  /**
   * Agreements
   * 1. Customer and Jamm
   * 2. Customer and per-Bank
   *
   * @generated from field: common.v1.JammUserAgreement jamm_user_agreement = 2;
   */
  jammUserAgreement?: JammUserAgreementJson;
};

/**
 * Describes the message common.v1.UserAgreements.
 * Use `create(UserAgreementsSchema)` to create a new message.
 */
export const UserAgreementsSchema: GenMessage<UserAgreements, UserAgreementsJson> = /*@__PURE__*/
  messageDesc(file_common_v1_webapp, 9);

/**
 * 1-1 relationship
 *
 * @generated from message common.v1.JammUserAgreement
 */
export type JammUserAgreement = Message<"common.v1.JammUserAgreement"> & {
  /**
   * @generated from field: string customer_id = 1;
   */
  customerId: string;

  /**
   * @generated from field: common.v1.JammUserAgreementName agreement_name = 2;
   */
  agreementName: JammUserAgreementName;

  /**
   * @generated from field: google.protobuf.Timestamp agreed_at = 4;
   */
  agreedAt?: Timestamp;
};

/**
 * 1-1 relationship
 *
 * @generated from message common.v1.JammUserAgreement
 */
export type JammUserAgreementJson = {
  /**
   * @generated from field: string customer_id = 1;
   */
  customerId?: string;

  /**
   * @generated from field: common.v1.JammUserAgreementName agreement_name = 2;
   */
  agreementName?: JammUserAgreementNameJson;

  /**
   * @generated from field: google.protobuf.Timestamp agreed_at = 4;
   */
  agreedAt?: TimestampJson;
};

/**
 * Describes the message common.v1.JammUserAgreement.
 * Use `create(JammUserAgreementSchema)` to create a new message.
 */
export const JammUserAgreementSchema: GenMessage<JammUserAgreement, JammUserAgreementJson> = /*@__PURE__*/
  messageDesc(file_common_v1_webapp, 10);

/**
 * @generated from message common.v1.TrustdockData
 */
export type TrustdockData = Message<"common.v1.TrustdockData"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string public_id = 2;
   */
  publicId: string;

  /**
   * @generated from field: string state = 3;
   */
  state: string;

  /**
   * @generated from field: string result = 4;
   */
  result: string;

  /**
   * @generated from field: google.protobuf.Timestamp accepted_at = 5;
   */
  acceptedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp plans_selected_at = 6;
   */
  plansSelectedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp document_submitted_at = 7;
   */
  documentSubmittedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp prepared_at = 8;
   */
  preparedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp verified_at = 9;
   */
  verifiedAt?: Timestamp;

  /**
   * @generated from field: repeated common.v1.Record records = 10;
   */
  records: Record[];
};

/**
 * @generated from message common.v1.TrustdockData
 */
export type TrustdockDataJson = {
  /**
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * @generated from field: string public_id = 2;
   */
  publicId?: string;

  /**
   * @generated from field: string state = 3;
   */
  state?: string;

  /**
   * @generated from field: string result = 4;
   */
  result?: string;

  /**
   * @generated from field: google.protobuf.Timestamp accepted_at = 5;
   */
  acceptedAt?: TimestampJson;

  /**
   * @generated from field: google.protobuf.Timestamp plans_selected_at = 6;
   */
  plansSelectedAt?: TimestampJson;

  /**
   * @generated from field: google.protobuf.Timestamp document_submitted_at = 7;
   */
  documentSubmittedAt?: TimestampJson;

  /**
   * @generated from field: google.protobuf.Timestamp prepared_at = 8;
   */
  preparedAt?: TimestampJson;

  /**
   * @generated from field: google.protobuf.Timestamp verified_at = 9;
   */
  verifiedAt?: TimestampJson;

  /**
   * @generated from field: repeated common.v1.Record records = 10;
   */
  records?: RecordJson[];
};

/**
 * Describes the message common.v1.TrustdockData.
 * Use `create(TrustdockDataSchema)` to create a new message.
 */
export const TrustdockDataSchema: GenMessage<TrustdockData, TrustdockDataJson> = /*@__PURE__*/
  messageDesc(file_common_v1_webapp, 11);

/**
 * @generated from message common.v1.Record
 */
export type Record = Message<"common.v1.Record"> & {
  /**
   * @generated from field: string state = 1;
   */
  state: string;

  /**
   * @generated from field: string result = 2;
   */
  result: string;

  /**
   * @generated from field: string content = 3;
   */
  content: string;

  /**
   * @generated from field: google.protobuf.Timestamp verified_at = 4;
   */
  verifiedAt?: Timestamp;
};

/**
 * @generated from message common.v1.Record
 */
export type RecordJson = {
  /**
   * @generated from field: string state = 1;
   */
  state?: string;

  /**
   * @generated from field: string result = 2;
   */
  result?: string;

  /**
   * @generated from field: string content = 3;
   */
  content?: string;

  /**
   * @generated from field: google.protobuf.Timestamp verified_at = 4;
   */
  verifiedAt?: TimestampJson;
};

/**
 * Describes the message common.v1.Record.
 * Use `create(RecordSchema)` to create a new message.
 */
export const RecordSchema: GenMessage<Record, RecordJson> = /*@__PURE__*/
  messageDesc(file_common_v1_webapp, 12);

/**
 * @generated from enum common.v1.Gender
 */
export enum Gender {
  /**
   * @generated from enum value: GENDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: GENDER_FEMALE = 1;
   */
  FEMALE = 1,

  /**
   * @generated from enum value: GENDER_MALE = 2;
   */
  MALE = 2,

  /**
   * @generated from enum value: GENDER_UNKNOWN = 3;
   */
  UNKNOWN = 3,
}

/**
 * @generated from enum common.v1.Gender
 */
export type GenderJson = "GENDER_UNSPECIFIED" | "GENDER_FEMALE" | "GENDER_MALE" | "GENDER_UNKNOWN";

/**
 * Describes the enum common.v1.Gender.
 */
export const GenderSchema: GenEnum<Gender, GenderJson> = /*@__PURE__*/
  enumDesc(file_common_v1_webapp, 0);

/**
 * @generated from enum common.v1.CommonStatus
 */
export enum CommonStatus {
  /**
   * @generated from enum value: COMMON_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COMMON_STATUS_INITIAL = 1;
   */
  INITIAL = 1,

  /**
   * @generated from enum value: COMMON_STATUS_ACTIVATED = 2;
   */
  ACTIVATED = 2,

  /**
   * @generated from enum value: COMMON_STATUS_DEACTIVATED = 3;
   */
  DEACTIVATED = 3,

  /**
   * @generated from enum value: COMMON_STATUS_BLOCKING = 4;
   */
  BLOCKING = 4,
}

/**
 * @generated from enum common.v1.CommonStatus
 */
export type CommonStatusJson = "COMMON_STATUS_UNSPECIFIED" | "COMMON_STATUS_INITIAL" | "COMMON_STATUS_ACTIVATED" | "COMMON_STATUS_DEACTIVATED" | "COMMON_STATUS_BLOCKING";

/**
 * Describes the enum common.v1.CommonStatus.
 */
export const CommonStatusSchema: GenEnum<CommonStatus, CommonStatusJson> = /*@__PURE__*/
  enumDesc(file_common_v1_webapp, 1);

/**
 * @generated from enum common.v1.ChargeStatus
 */
export enum ChargeStatus {
  /**
   * @generated from enum value: CHARGE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CHARGE_STATUS_SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * @generated from enum value: CHARGE_STATUS_FAILURE = 2;
   */
  FAILURE = 2,

  /**
   * @generated from enum value: CHARGE_STATUS_WAITING_EKYC = 3;
   */
  WAITING_EKYC = 3,

  /**
   * @generated from enum value: CHARGE_STATUS_BLOCKING = 4;
   */
  BLOCKING = 4,

  /**
   * @generated from enum value: CHARGE_STATUS_CANCELLED = 5;
   */
  CANCELLED = 5,

  /**
   * @generated from enum value: CHARGE_STATUS_REFUNDED = 6;
   */
  REFUNDED = 6,
}

/**
 * @generated from enum common.v1.ChargeStatus
 */
export type ChargeStatusJson = "CHARGE_STATUS_UNSPECIFIED" | "CHARGE_STATUS_SUCCESS" | "CHARGE_STATUS_FAILURE" | "CHARGE_STATUS_WAITING_EKYC" | "CHARGE_STATUS_BLOCKING" | "CHARGE_STATUS_CANCELLED" | "CHARGE_STATUS_REFUNDED";

/**
 * Describes the enum common.v1.ChargeStatus.
 */
export const ChargeStatusSchema: GenEnum<ChargeStatus, ChargeStatusJson> = /*@__PURE__*/
  enumDesc(file_common_v1_webapp, 2);

/**
 * @generated from enum common.v1.JammUserAgreementName
 */
export enum JammUserAgreementName {
  /**
   * @generated from enum value: JAMM_USER_AGREEMENT_NAME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: JAMM_USER_AGREEMENT_NAME_PRIVACY_POLICY = 1;
   */
  PRIVACY_POLICY = 1,

  /**
   * @generated from enum value: JAMM_USER_AGREEMENT_NAME_TERMS_OF_SERVICE = 2;
   */
  TERMS_OF_SERVICE = 2,
}

/**
 * @generated from enum common.v1.JammUserAgreementName
 */
export type JammUserAgreementNameJson = "JAMM_USER_AGREEMENT_NAME_UNSPECIFIED" | "JAMM_USER_AGREEMENT_NAME_PRIVACY_POLICY" | "JAMM_USER_AGREEMENT_NAME_TERMS_OF_SERVICE";

/**
 * Describes the enum common.v1.JammUserAgreementName.
 */
export const JammUserAgreementNameSchema: GenEnum<JammUserAgreementName, JammUserAgreementNameJson> = /*@__PURE__*/
  enumDesc(file_common_v1_webapp, 3);

/**
 * @generated from enum common.v1.KycState
 */
export enum KycState {
  /**
   * @generated from enum value: KYC_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: KYC_STATE_ACCEPTED = 1;
   */
  ACCEPTED = 1,

  /**
   * @generated from enum value: KYC_STATE_PLANS_SELECTED = 2;
   */
  PLANS_SELECTED = 2,

  /**
   * @generated from enum value: KYC_STATE_DOCUMENT_SUBMITTED = 3;
   */
  DOCUMENT_SUBMITTED = 3,

  /**
   * @generated from enum value: KYC_STATE_IN_PROGRESS = 4;
   */
  IN_PROGRESS = 4,

  /**
   * @generated from enum value: KYC_STATE_VERIFIED = 5;
   */
  VERIFIED = 5,

  /**
   * @generated from enum value: KYC_STATE_NOT_STARTED = 6;
   */
  NOT_STARTED = 6,

  /**
   * @generated from enum value: KYC_STATE_DENIED = 7;
   */
  DENIED = 7,
}

/**
 * @generated from enum common.v1.KycState
 */
export type KycStateJson = "KYC_STATE_UNSPECIFIED" | "KYC_STATE_ACCEPTED" | "KYC_STATE_PLANS_SELECTED" | "KYC_STATE_DOCUMENT_SUBMITTED" | "KYC_STATE_IN_PROGRESS" | "KYC_STATE_VERIFIED" | "KYC_STATE_NOT_STARTED" | "KYC_STATE_DENIED";

/**
 * Describes the enum common.v1.KycState.
 */
export const KycStateSchema: GenEnum<KycState, KycStateJson> = /*@__PURE__*/
  enumDesc(file_common_v1_webapp, 4);

/**
 * @generated from enum common.v1.KycResult
 */
export enum KycResult {
  /**
   * @generated from enum value: KYC_RESULT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: KYC_RESULT_APPROVED = 1;
   */
  APPROVED = 1,

  /**
   * @generated from enum value: KYC_RESULT_DENIED = 2;
   */
  DENIED = 2,
}

/**
 * @generated from enum common.v1.KycResult
 */
export type KycResultJson = "KYC_RESULT_UNSPECIFIED" | "KYC_RESULT_APPROVED" | "KYC_RESULT_DENIED";

/**
 * Describes the enum common.v1.KycResult.
 */
export const KycResultSchema: GenEnum<KycResult, KycResultJson> = /*@__PURE__*/
  enumDesc(file_common_v1_webapp, 5);

/**
 * @generated from enum common.v1.RefundStatus
 */
export enum RefundStatus {
  /**
   * Default unspecified status. Should not be used.
   *
   * @generated from enum value: REFUND_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Refund is pending confirmation
   *
   * @generated from enum value: REFUND_STATUS_WAITING_CONFIRMATION = 1;
   */
  WAITING_CONFIRMATION = 1,

  /**
   * Refund has been confirmed and processed
   *
   * @generated from enum value: REFUND_STATUS_CONFIRMED = 2;
   */
  CONFIRMED = 2,

  /**
   * Refund was rejected
   *
   * @generated from enum value: REFUND_STATUS_FAILED = 3;
   */
  FAILED = 3,

  /**
   * Refund was cancelled by merchant
   *
   * @generated from enum value: REFUND_STATUS_CANCELED_BY_MERCHANT = 4;
   */
  CANCELED_BY_MERCHANT = 4,
}

/**
 * @generated from enum common.v1.RefundStatus
 */
export type RefundStatusJson = "REFUND_STATUS_UNSPECIFIED" | "REFUND_STATUS_WAITING_CONFIRMATION" | "REFUND_STATUS_CONFIRMED" | "REFUND_STATUS_FAILED" | "REFUND_STATUS_CANCELED_BY_MERCHANT";

/**
 * Describes the enum common.v1.RefundStatus.
 */
export const RefundStatusSchema: GenEnum<RefundStatus, RefundStatusJson> = /*@__PURE__*/
  enumDesc(file_common_v1_webapp, 6);

/**
 * @generated from enum common.v1.RejectReason
 */
export enum RejectReason {
  /**
   * @generated from enum value: REJECT_REASON_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Refund was rejected by merchant
   *
   * @generated from enum value: REJECT_REASON_MERCHANT_REQUEST_DENIED = 1;
   */
  MERCHANT_REQUEST_DENIED = 1,

  /**
   * Merchant does not have enough balance to process refund
   *
   * @generated from enum value: REJECT_REASON_NEGATIVE_MERCHANT_BALANCE = 2;
   */
  NEGATIVE_MERCHANT_BALANCE = 2,

  /**
   * Refund rejected by bank
   *
   * @generated from enum value: REJECT_REASON_PAYMENT_REJECTED_BY_BANK = 3;
   */
  PAYMENT_REJECTED_BY_BANK = 3,
}

/**
 * @generated from enum common.v1.RejectReason
 */
export type RejectReasonJson = "REJECT_REASON_UNSPECIFIED" | "REJECT_REASON_MERCHANT_REQUEST_DENIED" | "REJECT_REASON_NEGATIVE_MERCHANT_BALANCE" | "REJECT_REASON_PAYMENT_REJECTED_BY_BANK";

/**
 * Describes the enum common.v1.RejectReason.
 */
export const RejectReasonSchema: GenEnum<RejectReason, RejectReasonJson> = /*@__PURE__*/
  enumDesc(file_common_v1_webapp, 7);

