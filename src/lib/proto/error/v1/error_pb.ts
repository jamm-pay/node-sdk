// @generated by protoc-gen-es v2.2.2 with parameter "target=ts,json_types=true"
// @generated from file error/v1/error.proto (package error.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc } from "@bufbuild/protobuf/codegenv1";

/**
 * Describes the file error/v1/error.proto.
 */
export const file_error_v1_error: GenFile = /*@__PURE__*/
  fileDesc("ChRlcnJvci92MS9lcnJvci5wcm90bxIIZXJyb3IudjEqgwYKCUVycm9yVHlwZRIaChZFUlJPUl9UWVBFX1VOU1BFQ0lGSUVEEAASGgoWRVJST1JfVFlQRV9BVVRIX0ZBSUxFRBABEhwKGEVSUk9SX1RZUEVfQVVUSF9SRUpFQ1RFRBACEiYKIkVSUk9SX1RZUEVfQUNDT1VOVF9DUkVBVElPTl9GQUlMRUQQZRIqCiZFUlJPUl9UWVBFX0FDQ09VTlRfTU9ESUZJQ0FUSU9OX0ZBSUxFRBBmEiYKIkVSUk9SX1RZUEVfQUNDT1VOVF9ERUxFVElPTl9GQUlMRUQQZxIvCitFUlJPUl9UWVBFX0FDQ09VTlRfQkFOS19SRUdJU1RSQVRJT05fRkFJTEVEEGgSHAoXRVJST1JfVFlQRV9LWUNfUkVKRUNURUQQrQISKwomRVJST1JfVFlQRV9OT1RJRklDQVRJT05fV0VCSE9PS19GQUlMRUQQ9AMSKQokRVJST1JfVFlQRV9OT1RJRklDQVRJT05fRU1BSUxfRkFJTEVEEPUDEicKIkVSUk9SX1RZUEVfTk9USUZJQ0FUSU9OX1NNU19GQUlMRUQQ9gMSKwomRVJST1JfVFlQRV9QQVlNRU5UX0dBVEVXQVlfVU5BVkFJTEFCTEUQ6AcSJgohRVJST1JfVFlQRV9QQVlNRU5UX0dBVEVXQVlfRkFJTEVEEOkHEikKJEVSUk9SX1RZUEVfUEFZTUVOVF9WQUxJREFUSU9OX0ZBSUxFRBDqBxIlCiBFUlJPUl9UWVBFX1BBWU1FTlRfQ0hBUkdFX0ZBSUxFRBDrBxInCiJFUlJPUl9UWVBFX1BBWU1FTlRfQ0hBUkdFX1JFSkVDVEVEEOwHEikKJEVSUk9SX1RZUEVfUEFZTUVOVF9DSEFSR0VfT1ZFUl9MSU1JVBDtBxIzCi5FUlJPUl9UWVBFX1BBWU1FTlRfQ0hBUkdFX1NVQlNDUklQVElPTl9FWFBJUkVEEO4HEiQKH0VSUk9SX1RZUEVfUEFZTUVOVF9MSU5LX0VYUElSRUQQ7wdCfgoMY29tLmVycm9yLnYxQgpFcnJvclByb3RvUAFaH2FwaS9wcm90by9nZW4vZXJyb3IvdjE7ZXJyb3JfdjGiAgNFWFiqAghFcnJvci5WMcoCCUVycm9yX1xWMeICFUVycm9yX1xWMVxHUEJNZXRhZGF0YeoCCUVycm9yOjpWMWIGcHJvdG8z");

/**
 * ErrorType represents the unified type used across the system to categorize the error.
 *
 * Design purpose:
 * ----------------
 * This design simplifies error handling in clients and backends,
 * provides a single source of truth for error conditions, and makes it easier to document and
 * maintain over time.
 *
 * How to use:
 * ----------------
 * 1. When returning errors from services or sending webhook, map the underlying cause to one of these enum values.
 *    This ensures consistent of error conditions across different services and clients.
 * 2. Use these enum values in logs, metrics, or responses to help
 *    developers and customers understand what went wrong.
 * 3. Avoid handling errors purely by their string messages. Instead, switch on the ErrorType
 *    values to take appropriate actions.
 *
 * Naming Conventions
 * ------------------
 * - Use UPPER_CASE_SNAKE_CASE for all enum values.
 * - Follow the format: {CONTEXT}_{ACTION}_{RESULT}
 *   - CONTEXT: The logical domain or scope (e.g., AUTH, ACCOUNT, KYC, NOTIFICATION, PAYMENT)
 *   - ACTION: The operation or process that was attempted (e.g., CREATION, VALIDATION, CHARGE)
 *   - RESULT: The outcome of the action (e.g., FAILED, REJECTED, UNAVAILABLE, EXPIRED)
 * - Example: PAYMENT_CHARGE_FAILED clearly states that a PAYMENT CHARGE action FAILED.
 * - This convention makes it easy to locate and understand where the error originated and what went wrong.
 *
 * How to Add New Error Items
 * --------------------------
 * 1. Identify the appropriate category or domain for the new error (e.g., Auth, Account, Payment).
 * 2. Maintain numeric ordering to keep ranges logical (e.g., keep Payment errors above 1000).
 *   Assign a new number that fits into the existing pattern without disrupting already used values.
 * 3. Write a brief but descriptive comment for the new value, explaining when and why it occurs.
 * 4. Follow the established naming pattern: CONTEXT_ACTION_RESULT (e.g., PAYMENT_VALIDATION_FAILED).
 * 5. Add new values at the bottom of their domainâ€™s range to prevent renumbering existing codes.
 *
 * @generated from enum error.v1.ErrorType
 */
export enum ErrorType {
  /**
   * Unspecified error type. Indicates that no specific error was set.
   *
   * @generated from enum value: ERROR_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Auth-related errors (1 - 100)
   * Triggered when authentication or authorization fails.
   * Failed: The user failed to authenticate or authorize, e.g., invalid payment link access.
   *
   * @generated from enum value: ERROR_TYPE_AUTH_FAILED = 1;
   */
  AUTH_FAILED = 1,

  /**
   * Rejected: The user is not authorized to perform the action, e.g., insufficient role, access payment link with merchant credential.
   *
   * @generated from enum value: ERROR_TYPE_AUTH_REJECTED = 2;
   */
  AUTH_REJECTED = 2,

  /**
   * Account-related errors (101 - 300)
   * Triggered during account lifecycle events (creation, modification, deletion, bank registration).
   * Failed: The account creation, modification, deletion, or bank registration failed.
   *
   * @generated from enum value: ERROR_TYPE_ACCOUNT_CREATION_FAILED = 101;
   */
  ACCOUNT_CREATION_FAILED = 101,

  /**
   * @generated from enum value: ERROR_TYPE_ACCOUNT_MODIFICATION_FAILED = 102;
   */
  ACCOUNT_MODIFICATION_FAILED = 102,

  /**
   * @generated from enum value: ERROR_TYPE_ACCOUNT_DELETION_FAILED = 103;
   */
  ACCOUNT_DELETION_FAILED = 103,

  /**
   * @generated from enum value: ERROR_TYPE_ACCOUNT_BANK_REGISTRATION_FAILED = 104;
   */
  ACCOUNT_BANK_REGISTRATION_FAILED = 104,

  /**
   * KYC-related errors (301 - 400)
   * Triggered during KYC processes, e.g., when a KYC request is rejected.
   * Rejected: The KYC request was rejected by TrustDock.
   *
   * @generated from enum value: ERROR_TYPE_KYC_REJECTED = 301;
   */
  KYC_REJECTED = 301,

  /**
   * Notification-related errors (500 - 700)
   * Triggered when sending notifications (webhook, email, SMS) fails.
   * Failed: The notification webhook, email, or SMS failed to send.
   *
   * @generated from enum value: ERROR_TYPE_NOTIFICATION_WEBHOOK_FAILED = 500;
   */
  NOTIFICATION_WEBHOOK_FAILED = 500,

  /**
   * @generated from enum value: ERROR_TYPE_NOTIFICATION_EMAIL_FAILED = 501;
   */
  NOTIFICATION_EMAIL_FAILED = 501,

  /**
   * @generated from enum value: ERROR_TYPE_NOTIFICATION_SMS_FAILED = 502;
   */
  NOTIFICATION_SMS_FAILED = 502,

  /**
   * Payment-related errors (1000+)
   * Triggered during payment operations, BankPay interactions, request validation, and charge handling.
   * Unavailable: The payment gateway is unavailable, e.g., BankPay is down.
   *
   * @generated from enum value: ERROR_TYPE_PAYMENT_GATEWAY_UNAVAILABLE = 1000;
   */
  PAYMENT_GATEWAY_UNAVAILABLE = 1000,

  /**
   * Failed: The payment gateway failed to process the payment, e.g., BankPay returned an error.
   *
   * @generated from enum value: ERROR_TYPE_PAYMENT_GATEWAY_FAILED = 1001;
   */
  PAYMENT_GATEWAY_FAILED = 1001,

  /**
   * Validation Failed: The payment request validation failed, e.g., invalid payment ID.
   *
   * @generated from enum value: ERROR_TYPE_PAYMENT_VALIDATION_FAILED = 1002;
   */
  PAYMENT_VALIDATION_FAILED = 1002,

  /**
   * Charge Failed: The payment charge failed, e.g., workflow initiate failed.
   *
   * @generated from enum value: ERROR_TYPE_PAYMENT_CHARGE_FAILED = 1003;
   */
  PAYMENT_CHARGE_FAILED = 1003,

  /**
   * Charge Rejected: The payment charge was rejected, e.g., ForceKyc but Kyc is waiting for approval.
   *
   * @generated from enum value: ERROR_TYPE_PAYMENT_CHARGE_REJECTED = 1004;
   */
  PAYMENT_CHARGE_REJECTED = 1004,

  /**
   * Charge Over Limit: The payment charge amount exceeded the limit.
   *
   * @generated from enum value: ERROR_TYPE_PAYMENT_CHARGE_OVER_LIMIT = 1005;
   */
  PAYMENT_CHARGE_OVER_LIMIT = 1005,

  /**
   * Charge Subscription Expired: The payment charge subscription expired, e.g., subscription is expired.
   * Support in the future.
   *
   * @generated from enum value: ERROR_TYPE_PAYMENT_CHARGE_SUBSCRIPTION_EXPIRED = 1006;
   */
  PAYMENT_CHARGE_SUBSCRIPTION_EXPIRED = 1006,

  /**
   * Link Expired: The payment link expired.
   *
   * @generated from enum value: ERROR_TYPE_PAYMENT_LINK_EXPIRED = 1007;
   */
  PAYMENT_LINK_EXPIRED = 1007,
}

/**
 * ErrorType represents the unified type used across the system to categorize the error.
 *
 * Design purpose:
 * ----------------
 * This design simplifies error handling in clients and backends,
 * provides a single source of truth for error conditions, and makes it easier to document and
 * maintain over time.
 *
 * How to use:
 * ----------------
 * 1. When returning errors from services or sending webhook, map the underlying cause to one of these enum values.
 *    This ensures consistent of error conditions across different services and clients.
 * 2. Use these enum values in logs, metrics, or responses to help
 *    developers and customers understand what went wrong.
 * 3. Avoid handling errors purely by their string messages. Instead, switch on the ErrorType
 *    values to take appropriate actions.
 *
 * Naming Conventions
 * ------------------
 * - Use UPPER_CASE_SNAKE_CASE for all enum values.
 * - Follow the format: {CONTEXT}_{ACTION}_{RESULT}
 *   - CONTEXT: The logical domain or scope (e.g., AUTH, ACCOUNT, KYC, NOTIFICATION, PAYMENT)
 *   - ACTION: The operation or process that was attempted (e.g., CREATION, VALIDATION, CHARGE)
 *   - RESULT: The outcome of the action (e.g., FAILED, REJECTED, UNAVAILABLE, EXPIRED)
 * - Example: PAYMENT_CHARGE_FAILED clearly states that a PAYMENT CHARGE action FAILED.
 * - This convention makes it easy to locate and understand where the error originated and what went wrong.
 *
 * How to Add New Error Items
 * --------------------------
 * 1. Identify the appropriate category or domain for the new error (e.g., Auth, Account, Payment).
 * 2. Maintain numeric ordering to keep ranges logical (e.g., keep Payment errors above 1000).
 *   Assign a new number that fits into the existing pattern without disrupting already used values.
 * 3. Write a brief but descriptive comment for the new value, explaining when and why it occurs.
 * 4. Follow the established naming pattern: CONTEXT_ACTION_RESULT (e.g., PAYMENT_VALIDATION_FAILED).
 * 5. Add new values at the bottom of their domainâ€™s range to prevent renumbering existing codes.
 *
 * @generated from enum error.v1.ErrorType
 */
export type ErrorTypeJson = "ERROR_TYPE_UNSPECIFIED" | "ERROR_TYPE_AUTH_FAILED" | "ERROR_TYPE_AUTH_REJECTED" | "ERROR_TYPE_ACCOUNT_CREATION_FAILED" | "ERROR_TYPE_ACCOUNT_MODIFICATION_FAILED" | "ERROR_TYPE_ACCOUNT_DELETION_FAILED" | "ERROR_TYPE_ACCOUNT_BANK_REGISTRATION_FAILED" | "ERROR_TYPE_KYC_REJECTED" | "ERROR_TYPE_NOTIFICATION_WEBHOOK_FAILED" | "ERROR_TYPE_NOTIFICATION_EMAIL_FAILED" | "ERROR_TYPE_NOTIFICATION_SMS_FAILED" | "ERROR_TYPE_PAYMENT_GATEWAY_UNAVAILABLE" | "ERROR_TYPE_PAYMENT_GATEWAY_FAILED" | "ERROR_TYPE_PAYMENT_VALIDATION_FAILED" | "ERROR_TYPE_PAYMENT_CHARGE_FAILED" | "ERROR_TYPE_PAYMENT_CHARGE_REJECTED" | "ERROR_TYPE_PAYMENT_CHARGE_OVER_LIMIT" | "ERROR_TYPE_PAYMENT_CHARGE_SUBSCRIPTION_EXPIRED" | "ERROR_TYPE_PAYMENT_LINK_EXPIRED";

/**
 * Describes the enum error.v1.ErrorType.
 */
export const ErrorTypeSchema: GenEnum<ErrorType, ErrorTypeJson> = /*@__PURE__*/
  enumDesc(file_error_v1_error, 0);

